<?xml version="1.0" encoding="utf-8"?>
<modification>
	<code>fs_gp_grouped_catalog</code>
	<name>Grouped Product - Grouped Catalog</name>
	<version>6.1.0</version>
	<author>Fabio Messina - fabiome77@hotmail.it</author>
	<link>http://www.fabiom7.com</link>
<file path="catalog/model/catalog/product.php">
	<operation>
		<search><![CDATA[
		public function updateViewed($product_id) {
		]]></search>
		<add position="before"><![CDATA[
		public function getGroupedProductGrouped($product_id) {
			$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "gp_grouped WHERE product_id = '" . (int)$product_id . "'");

			return $query->row;
		}

		public function getGroupedProductGroupedChilds($product_id) {
			$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "gp_grouped_child WHERE product_id = '" . (int)$product_id . "' ORDER BY child_sort_order");

			return $query->rows;
		}
		]]></add>
	</operation>
</file>
<file path="catalog/controller/product/product.php">
	<operation>
		<search><![CDATA[
		$data['header'] = $this->load->controller('common/header');
		]]></search>
		<add position="before"><![CDATA[
		if ($is_gp_grouped = $this->model_catalog_product->getGroupedProductGrouped($this->request->get['product_id'])) {
			$data['template'] = $template = $this->config->get('config_template');

			$this->document->addStyle('catalog/view/theme/' . $template . '/stylesheet/gp_grouped_' . $is_gp_grouped['gp_template'] . '.css');
		}
		]]></add>
	</operation>
	<operation>
		<search><![CDATA[
		if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/product/product.tpl')) {
		]]></search>
		<add position="before"><![CDATA[
		if ($is_gp_grouped) {
			// Clear default data
			$data['model'] = '';
			$data['text_model'] = '';
			$data['stock'] = '';
			$data['text_stock'] = '';
			$data['reward'] = '';
			$data['text_reward'] = '';
			$data['points'] = '';
			$data['text_points'] = '';
			$data['discounts'] = array();
			$data['price'] = false;

			// GP Configuration
			$gp_image_popup_w = $this->config->get('gp_grouped_image_popup_width');
			$gp_image_popup_h = $this->config->get('gp_grouped_image_popup_height');
			$gp_image_thumb_w = $this->config->get('gp_grouped_image_thumb_width');
			$gp_image_thumb_h = $this->config->get('gp_grouped_image_thumb_height');
			$gp_image_added_w = $this->config->get('gp_grouped_image_added_width');
			$gp_image_added_h = $this->config->get('gp_grouped_image_added_height');
			$gp_image_child_w = $this->config->get('gp_grouped_image_child_width');
			$gp_image_child_h = $this->config->get('gp_grouped_image_child_height');

			$gp_add_child_image = $this->config->get('gp_grouped_add_child_image');
			$gp_add_child_images = $this->config->get('gp_grouped_add_child_images');
			$gp_add_child_description = $this->config->get('gp_grouped_add_child_description');

			if ($product_info['image']) {
				$data['popup'] = $this->model_tool_image->resize($product_info['image'], $gp_image_popup_w, $gp_image_popup_h);
				$data['thumb'] = $this->model_tool_image->resize($product_info['image'], $gp_image_thumb_w, $gp_image_thumb_h);
			}

			if ($gp_image_child_w && $gp_image_child_h) {
				$gp_child_image_col = true;
			} else {
				$gp_child_image_col = false;
			}
			
			$gp_child_option_col = false;

			$child_no_image = array(
				'swap' => $this->model_tool_image->resize('no_image.png', $gp_image_thumb_w, $gp_image_thumb_h),
				'popup' => ($gp_child_image_col) ? $this->model_tool_image->resize('no_image.png', $gp_image_popup_w, $gp_image_popup_h) : '',
				'thumb' => ($gp_child_image_col) ? $this->model_tool_image->resize('no_image.png', $gp_image_child_w, $gp_image_child_h) : ''
			);

			if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
				$tcg_customer_price = true;
			} else {
				$tcg_customer_price = false;
			}

			$tcg_tax = $this->config->get('config_tax');

			$this->language->load('product/gp_grouped');

			$data['text_gp_no_stock'] = $this->language->get('text_gp_no_stock');
			$data['text_gp_total'] = $this->language->get('text_gp_total');

			$data['gp_child_info'] = array();
			if ($this->config->get('gp_grouped_child_info')) {
				foreach ($this->config->get('gp_grouped_child_info') as $field) {
					$data['gp_child_info'][$field] = $this->language->get('text_gp_child_' . $field);
				}
			}
			/*$set = true;
			$filter = array();
			if (isset($this->request->get['attribute'])) {
				$filter = $this->request->get['attribute'];
			}*/
			$gp_child_attributes = $this->config->get('gp_grouped_child_attribute');
			$attributenames = array();
			$data['childs'] = array();
			$product_grouped = $this->model_catalog_product->getGroupedProductGroupedChilds($product_id);

				foreach ($product_grouped as $child) {
					$child_info = $this->model_catalog_product->getProduct($child['child_id']);

					if ($child_info) {
						if ($child_info['image']) {
							$child_image = array(
								'swap' => $this->model_tool_image->resize($child_info['image'], $gp_image_thumb_w, $gp_image_thumb_h),
								'popup' => ($gp_child_image_col) ? $this->model_tool_image->resize($child_info['image'], $gp_image_popup_w, $gp_image_popup_h) : '',
								'thumb' => ($gp_child_image_col) ? $this->model_tool_image->resize($child_info['image'], $gp_image_child_w, $gp_image_child_h) : ''
							);
							if ($gp_add_child_image) {
								$data['images'][] = array(
									'popup' => $this->model_tool_image->resize($child_info['image'], $gp_image_popup_w, $gp_image_popup_h),
									'thumb' => $this->model_tool_image->resize($child_info['image'], $gp_image_added_w, $gp_image_added_h),
									'name'  => $child_info['name']
								);
							}
							if ($gp_add_child_images) {
								$results = $this->model_catalog_product->getProductImages($child['child_id']);
								foreach ($results as $result) {
									$data['images'][] = array(
										'popup' => $this->model_tool_image->resize($result['image'], $gp_image_popup_w, $gp_image_popup_h),
										'thumb' => $this->model_tool_image->resize($result['image'], $gp_image_added_w, $gp_image_added_h),
										'name'  => $child_info['name']
									);
								}
							}
						} else {
							$child_image = $child_no_image;
						}

						if ($gp_add_child_description && $child_info['description']) { 
							$data['description'] .= '<ul class="gp-add-child-description"><li>' . $child_info['name'] . '</li><li>' . html_entity_decode($child_info['description'], ENT_QUOTES, 'UTF-8') . '</li></ul>';
						}

						if ($child_info['quantity'] <= 0) {
							$child_info['stock'] = $child_info['stock_status'];
						} elseif ($this->config->get('config_stock_display')) {
							$child_info['stock'] = $child_info['quantity'];
						} else {
							$child_info['stock'] = $this->language->get('text_instock');
						}

						if ($tcg_customer_price) {
							$child_price = $this->currency->format($this->tax->calculate($child_info['price'], $child_info['tax_class_id'], $tcg_tax));
						} else {
							$child_price = false;
						}

						if ((float)$child_info['special']) {
							$child_special = $this->currency->format($this->tax->calculate($child_info['special'], $child_info['tax_class_id'], $tcg_tax));
						} else {
							$child_special = false;
						}

						if ($tcg_tax) {
							$child_tax = $this->currency->format((float)$child_info['special'] ? $child_info['special'] : $child_info['price']);
						} else {
							$child_tax = false;
						}

						$child_discounts = array(); 

						foreach ($this->model_catalog_product->getProductDiscounts($child_info['product_id']) as $discount) {
							$child_discounts[] = array(
								'quantity' => $discount['quantity'],
								'price'    => $this->currency->format($this->tax->calculate($discount['price'], $child_info['tax_class_id'], $tcg_tax))
							);
						}

						// Disable button cart
						if ($this->config->get('gp_grouped_child_nocart') && !$this->config->get('config_stock_checkout') && $child_info['quantity'] <= 0) {
							$child_child_nocart = true;
						} else {
							$child_child_nocart = false;
						}

						if ($gp_child_attributes) {
							$child_attributes = $this->model_catalog_product->getProductAttributes($child_info['product_id']);
						} else {
							$child_attributes = array();
						}

						$child_options = array();

						foreach ($this->model_catalog_product->getProductOptions($child['child_id']) as $option) {
							$gp_child_option_col = true;

							$product_option_value_data = array();

							foreach ($option['product_option_value'] as $option_value) {
								if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {
									if ($tcg_customer_price && (float)$option_value['price']) {
										$child_option_price = $this->currency->format($this->tax->calculate($option_value['price'], $child_info['tax_class_id'], $tcg_tax ? 'P' : false));
									} else {
										$child_option_price = false;
									}

									$product_option_value_data[] = array(
										'product_option_value_id' => $option_value['product_option_value_id'],
										'option_value_id'         => $option_value['option_value_id'],
										'name'                    => $option_value['name'],
										'image'                   => $this->model_tool_image->resize($option_value['image'], 50, 50),
										'price'                   => $child_option_price,
										'price_prefix'            => $option_value['price_prefix']
									);
								}
							}

							$child_options[] = array(
								'product_option_id'    => $option['product_option_id'],
								'product_option_value' => $product_option_value_data,
								'option_id'            => $option['option_id'],
								'name'                 => $option['name'],
								'type'                 => $option['type'],
								'value'                => $option['value'],
								'required'             => $option['required']
							);
						}

						$qty_now = '';
						foreach ($this->cart->getProducts() as $gp_cart) {
							if ($child['child_id'] == $gp_cart['product_id']) {
								$qty_now = $gp_cart['quantity'];
							}
						}
						/* edit for filtering
						foreach ($child_attributes[0]['attribute'] as $key => $attribute){
							$attributenames[$key][] = $attribute['text'];
							
							if (isset($filter[$key])) $set = ($attribute['text']==$filter[$key])?($set & true):($set & false);
							
						}
						if ($set){*/
						$data['childs'][$child_info['product_id']] = array(
							'child_id'   => $child_info['product_id'],
							'info'       => $child_info,
							'image'      => $child_image,
							'name'       => str_replace($product_info['name'], '', $child_info['name']),
							'attributes' => $child_attributes,
							'price'      => $child_price,
							'special'    => $child_special,
							'tax'        => $child_tax,
							'nocart'     => $child_child_nocart,
							'options'    => $child_options,
							'discounts'  => $child_discounts,
							'qty_now'    => $qty_now
						);
						/*}*/
					}
				}
			// Column
			
			// $data['attributenames'] = $attributenames; edit for filtering
			
			$data['column_gp_image'] = $gp_child_image_col ? $this->language->get('column_gp_image') : false;
			$data['column_gp_name'] = $this->language->get('column_gp_name');
			$data['column_gp_price'] = $tcg_customer_price ? $this->language->get('column_gp_price') : false;
			$data['column_gp_option'] = $gp_child_option_col ? $this->language->get('column_gp_option') : false;
			$data['column_gp_qty'] = $this->language->get('column_gp_qty');

			if (file_exists(DIR_TEMPLATE . $template . '/template/product/gp_grouped_' . $is_gp_grouped['gp_template'] . '.tpl')) {
				$this->response->setOutput($this->load->view($template . '/template/product/gp_grouped_' . $is_gp_grouped['gp_template'] . '.tpl', $data));
			} else {
				$this->response->setOutput($this->load->view('default/template/product/gp_grouped_' . $is_gp_grouped['gp_template'] . '.tpl', $data));
			}
		} else
		]]></add>
	</operation>
</file>
<file path="catalog/controller/checkout/cart.php">
	<operation info=" add() - #307 ">
		<search><![CDATA[
		$product_options = $this->model_catalog_product->getProductOptions($this->request->post['product_id']);
		]]></search>
		<add position="after"><![CDATA[
		if ($this->model_catalog_product->getGroupedProductGrouped($this->request->post['product_id'])) {
			$json['error']['gp_data'] = true;
		}
		]]></add>
	</operation>
</file>
</modification>
